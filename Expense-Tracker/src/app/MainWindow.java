package app;

import controller.AddTransactionDialog;
import controller.StatsDialog;
import model.Transaction;
import model.Category;
import service.*;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.util.List;
import java.util.Map;
import java.io.IOException;

public class MainWindow extends JFrame {
    private JTable table;
    private JLabel incomeLabel, expenseLabel, balanceLabel, limitLabel;
    private JTextField limitField;
    private JTextArea currencyArea;

    private final TransactionService transactionService = new TransactionService();
    private final ReportService reportService = new ReportService();
    private final FileService fileService = new FileService();
    private final CurrencyService currencyService = new CurrencyService();
    private final BudgetService budgetService = new BudgetService();
    private final CategoryService categoryService = new CategoryService();

    public MainWindow() {
        setTitle("–§—ñ–Ω–∞–Ω—Å–æ–≤–∏–π —Ç—Ä–µ–∫–µ—Ä");
        setSize(1100, 700);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        setLayout(new BorderLayout());

        initDefaultCategories();

        JPanel topPanel = new JPanel();

        JButton addBtn = new JButton("–î–æ–¥–∞—Ç–∏");
        JButton statsBtn = new JButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞");
        JButton saveJson = new JButton("–ó–±–µ—Ä–µ–≥—Ç–∏ JSON");
        JButton saveCsv = new JButton("–ó–±–µ—Ä–µ–≥—Ç–∏ CSV");
        JButton saveTxt = new JButton("–ó–±–µ—Ä–µ–≥—Ç–∏ TXT");
        JButton loadBtn = new JButton("–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏");
        JButton updateBtn = new JButton("–û–Ω–æ–≤–∏—Ç–∏");
        JButton refreshRatesBtn = new JButton("–û–Ω–æ–≤–∏—Ç–∏ –∫—É—Ä—Å–∏");

        limitField = new JTextField(6);
        JButton limitBtn = new JButton("–õ—ñ–º—ñ—Ç");

        topPanel.add(addBtn);
        topPanel.add(statsBtn);
        topPanel.add(saveJson);
        topPanel.add(saveCsv);
        topPanel.add(saveTxt);
        topPanel.add(loadBtn);
        topPanel.add(updateBtn);
        topPanel.add(refreshRatesBtn);
        topPanel.add(new JLabel("–õ—ñ–º—ñ—Ç:"));
        topPanel.add(limitField);
        topPanel.add(limitBtn);

        table = new JTable();
        JScrollPane scrollPane = new JScrollPane(table);

        JPanel bottomPanel = new JPanel(new GridLayout(2, 1));
        JPanel summary = new JPanel(new FlowLayout(FlowLayout.LEFT));
        incomeLabel = new JLabel();
        expenseLabel = new JLabel();
        balanceLabel = new JLabel();
        limitLabel = new JLabel();

        summary.add(incomeLabel);
        summary.add(expenseLabel);
        summary.add(balanceLabel);
        summary.add(limitLabel);

        currencyArea = new JTextArea(4, 30);
        currencyArea.setEditable(false);
        JScrollPane currencyScroll = new JScrollPane(currencyArea);
        JPanel currencyPanel = new JPanel(new BorderLayout());
        currencyPanel.setBorder(BorderFactory.createTitledBorder("–ö—É—Ä—Å–∏ –≤–∞–ª—é—Ç"));
        currencyPanel.add(currencyScroll, BorderLayout.CENTER);

        bottomPanel.add(summary);
        bottomPanel.add(currencyPanel);

        add(topPanel, BorderLayout.NORTH);
        add(scrollPane, BorderLayout.CENTER);
        add(bottomPanel, BorderLayout.SOUTH);

        addBtn.addActionListener(e -> {
            AddTransactionDialog dialog = new AddTransactionDialog(this, transactionService, categoryService, currencyService);
            dialog.setVisible(true);
            updateTable();
        });

        statsBtn.addActionListener(e -> {
            StatsDialog dialog = new StatsDialog(this, transactionService);
            dialog.setVisible(true);
        });

        updateBtn.addActionListener(e -> updateTable());

        saveJson.addActionListener(e -> {
            try {
                fileService.saveAsJson(transactionService.getAllTransactions(), "resources/transactions.json");
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ JSON.");
            }
        });

        saveCsv.addActionListener(e -> {
            try {
                fileService.saveAsCsv(transactionService.getAllTransactions(), "resources/transactions.csv");
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ CSV.");
            }
        });

        saveTxt.addActionListener(e -> {
            try {
                fileService.saveAsTxt(transactionService.getAllTransactions(), "resources/transactions.txt");
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ TXT.");
            }
        });

        loadBtn.addActionListener(e -> {
            try {
                List<Transaction> list = fileService.loadFromJson("resources/transactions.json");
                transactionService.clearTransactions();
                list.forEach(transactionService::addTransaction);
                updateTable();
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ.");
            }
        });

        limitBtn.addActionListener(e -> {
            try {
                double val = Double.parseDouble(limitField.getText());
                budgetService.setMonthlyLimit(val);
                updateSummary();
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ");
            }
        });

        refreshRatesBtn.addActionListener(e -> {
            currencyService.fetchRatesFromInternet();
            updateCurrency();
            JOptionPane.showMessageDialog(this, "–ö—É—Ä—Å–∏ –≤–∞–ª—é—Ç –æ–Ω–æ–≤–ª–µ–Ω–æ –∑ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É.");
        });

        JPopupMenu popup = new JPopupMenu();
        JMenuItem edit = new JMenuItem("–†–µ–¥–∞–≥—É–≤–∞—Ç–∏");
        JMenuItem delete = new JMenuItem("–í–∏–¥–∞–ª–∏—Ç–∏");
        popup.add(edit);
        popup.add(delete);
        table.setComponentPopupMenu(popup);

        edit.addActionListener(e -> {
            int row = table.getSelectedRow();
            if (row != -1) {
                Transaction t = transactionService.getAllTransactions().get(row);
                AddTransactionDialog dialog = new AddTransactionDialog(this, transactionService, t, categoryService, currencyService);
                dialog.setVisible(true);
                updateTable();
            }
        });

        delete.addActionListener(e -> {
            int row = table.getSelectedRow();
            if (row != -1) {
                Transaction t = transactionService.getAllTransactions().get(row);
                int confirm = JOptionPane.showConfirmDialog(this, "–í–∏–¥–∞–ª–∏—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é?", "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è", JOptionPane.YES_NO_OPTION);
                if (confirm == JOptionPane.YES_OPTION) {
                    transactionService.removeTransaction(t);
                    updateTable();
                }
            }
        });

        updateTable();
    }

    private void updateTable() {
        List<Transaction> list = transactionService.getAllTransactions();
        String[] cols = {"–°—É–º–∞", "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è", "–î–∞—Ç–∞", "–û–ø–∏—Å", "–í–∞–ª—é—Ç–∞", "–¢–∏–ø"};
        DefaultTableModel model = new DefaultTableModel(cols, 0);
        for (Transaction t : list) {
            model.addRow(new Object[]{
                    t.getAmount(),
                    t.getCategory(),
                    t.getDate(),
                    t.getDescription(),
                    t.getCurrency(),
                    t.getType()
            });
        }
        table.setModel(model);
        updateSummary();
        updateCurrency();
    }

    private void updateSummary() {
        List<Transaction> list = transactionService.getAllTransactions();
        double income = reportService.getTotalByType(list, "income");
        double expense = reportService.getTotalByType(list, "expense");
        double balance = income - expense;
        double limit = budgetService.getMonthlyLimit();
        boolean exceeded = budgetService.isLimitExceeded(expense);

        incomeLabel.setText(" –î–æ—Ö—ñ–¥: " + income + " –≥—Ä–Ω ");
        expenseLabel.setText(" –í–∏—Ç—Ä–∞—Ç–∏: " + expense + " –≥—Ä–Ω ");
        balanceLabel.setText(" –ë–∞–ª–∞–Ω—Å: " + balance + " –≥—Ä–Ω ");
        limitLabel.setText(" –õ—ñ–º—ñ—Ç: " + limit + " –≥—Ä–Ω " + (exceeded ? "(–ø–µ—Ä–µ–≤–∏—â–µ–Ω–æ!)" : ""));
    }

    private void updateCurrency() {
        Map<String, Double> rates = currencyService.getAllRates();
        StringBuilder sb = new StringBuilder();
        for (Map.Entry<String, Double> entry : rates.entrySet()) {
            sb.append(entry.getKey()).append(" ‚Üí UAH: ").append(entry.getValue()).append("\n");
        }
        currencyArea.setText(sb.toString());
    }

    private void initDefaultCategories() {
        categoryService.addCategory(new Category("–ó–∞—Ä–ø–ª–∞—Ç–∞", "income", "üí∞"));
        categoryService.addCategory(new Category("–§—Ä—ñ–ª–∞–Ω—Å", "income", "üßë‚Äçüíª"));
        categoryService.addCategory(new Category("–ü–æ–¥–∞—Ä—É–Ω–æ–∫", "income", "üéÅ"));
        categoryService.addCategory(new Category("–á–∂–∞", "expense", "üçî"));
        categoryService.addCategory(new Category("–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "expense", "üöó"));
        categoryService.addCategory(new Category("–†–æ–∑–≤–∞–≥–∏", "expense", "üéÆ"));
        categoryService.addCategory(new Category("–ú–µ–¥–∏—Ü–∏–Ω–∞", "expense", "üíä"));
    }
}
